#nullable enable
*REMOVED*static MoreLinq.Extensions.BatchExtension.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
*REMOVED*static MoreLinq.Extensions.BatchExtension.Batch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static MoreLinq.MoreEnumerable.Append<T>(this System.Collections.Generic.IEnumerable<T>! head, T tail) -> System.Collections.Generic.IEnumerable<T>!
*REMOVED*static MoreLinq.MoreEnumerable.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
*REMOVED*static MoreLinq.MoreEnumerable.Batch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static MoreLinq.MoreEnumerable.Concat<T>(this System.Collections.Generic.IEnumerable<T>! head, T tail) -> System.Collections.Generic.IEnumerable<T>!
*REMOVED*static MoreLinq.MoreEnumerable.Prepend<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource value) -> System.Collections.Generic.IEnumerable<TSource>!
*REMOVED*static MoreLinq.MoreEnumerable.SkipLast<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<T>!
*REMOVED*static MoreLinq.MoreEnumerable.TakeLast<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<TSource>!
*REMOVED*static MoreLinq.MoreEnumerable.ToHashSet<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.HashSet<TSource>!
*REMOVED*static MoreLinq.MoreEnumerable.ToHashSet<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.HashSet<TSource>!
*REMOVED*static MoreLinq.MoreEnumerable.Windowed<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
MoreLinq.Extensions.MaximaExtension
MoreLinq.Extensions.MinimaExtension
static MoreLinq.Extensions.BatchExtension.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<TSource[]!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static MoreLinq.Extensions.BatchExtension.Batch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<TSource[]!>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3, T4, T5, T6, T7, T8>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh, System.Collections.Generic.IEnumerable<T8>! eighth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eighth)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third)>!
static MoreLinq.Extensions.CartesianExtension.Cartesian<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second)>!
static MoreLinq.Extensions.CountDownExtension.CountDown<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<(T Item, int? CountDown)>!
static MoreLinq.Extensions.EquiZipExtension.EquiZip<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.Extensions.EquiZipExtension.EquiZip<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.Extensions.EquiZipExtension.EquiZip<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1, T2)>!
static MoreLinq.Extensions.LagExtension.Lag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.Extensions.LagExtension.Lag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLagValue) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.Extensions.LeadExtension.Lead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource? OffsetItem)>!
static MoreLinq.Extensions.LeadExtension.Lead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLeadValue) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.Extensions.MaximaExtension.Maxima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.Extensions.MaximaExtension.Maxima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector, System.Collections.Generic.IComparer<TKey>? comparer) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.Extensions.MinimaExtension.Minima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.Extensions.MinimaExtension.Minima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector, System.Collections.Generic.IComparer<TKey>? comparer) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.Extensions.PairwiseExtension.Pairwise<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource, TSource)>!
static MoreLinq.Extensions.TagFirstLastExtension.TagFirstLast<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource Item, bool IsFirst, bool IsLast)>!
static MoreLinq.Extensions.ZipLongestExtension.ZipLongest<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.Extensions.ZipLongestExtension.ZipLongest<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.Extensions.ZipLongestExtension.ZipLongest<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
static MoreLinq.Extensions.ZipShortestExtension.ZipShortest<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.Extensions.ZipShortestExtension.ZipShortest<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.Extensions.ZipShortestExtension.ZipShortest<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
static MoreLinq.MoreEnumerable.Append<T>(System.Collections.Generic.IEnumerable<T>! head, T tail) -> System.Collections.Generic.IEnumerable<T>!
static MoreLinq.MoreEnumerable.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<TSource[]!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static MoreLinq.MoreEnumerable.Batch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<TSource[]!>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7, T8>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh, System.Collections.Generic.IEnumerable<T8>! eighth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eighth)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third, T4 Fourth)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second, T3 Third)>!
static MoreLinq.MoreEnumerable.Cartesian<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1 First, T2 Second)>!
static MoreLinq.MoreEnumerable.CountDown<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<(T Item, int? CountDown)>!
static MoreLinq.MoreEnumerable.EquiZip<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.MoreEnumerable.EquiZip<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.MoreEnumerable.EquiZip<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1, T2)>!
static MoreLinq.MoreEnumerable.Lag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.MoreEnumerable.Lag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLagValue) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.MoreEnumerable.Lead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource? OffsetItem)>!
static MoreLinq.MoreEnumerable.Lead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLeadValue) -> System.Collections.Generic.IEnumerable<(TSource Item, TSource OffsetItem)>!
static MoreLinq.MoreEnumerable.Maxima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.MoreEnumerable.Maxima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector, System.Collections.Generic.IComparer<TKey>? comparer) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.MoreEnumerable.Minima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.MoreEnumerable.Minima<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! selector, System.Collections.Generic.IComparer<TKey>? comparer) -> MoreLinq.IExtremaEnumerable<TSource>!
static MoreLinq.MoreEnumerable.Pairwise<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource, TSource)>!
static MoreLinq.MoreEnumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, TSource value) -> System.Collections.Generic.IEnumerable<TSource>!
static MoreLinq.MoreEnumerable.SkipLast<T>(System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<T>!
static MoreLinq.MoreEnumerable.TagFirstLast<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource Item, bool IsFirst, bool IsLast)>!
static MoreLinq.MoreEnumerable.TakeLast<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<TSource>!
static MoreLinq.MoreEnumerable.ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.HashSet<TSource>!
static MoreLinq.MoreEnumerable.ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.HashSet<TSource>!
static MoreLinq.MoreEnumerable.ZipLongest<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.MoreEnumerable.ZipLongest<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.MoreEnumerable.ZipLongest<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
static MoreLinq.MoreEnumerable.ZipShortest<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static MoreLinq.MoreEnumerable.ZipShortest<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static MoreLinq.MoreEnumerable.ZipShortest<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
