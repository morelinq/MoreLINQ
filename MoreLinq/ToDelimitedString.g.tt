<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.CSharp" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2008 Jonathan Skeet. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    partial class MoreEnumerable
    {
<#      var cscp = new CSharpCodeProvider();
        var types = 
            from method in typeof(StringBuilder).GetMethods(BindingFlags.Public | BindingFlags.Instance)
            where "Append" == method.Name
            select method.GetParameters() into parameters
            where parameters.Length == 1
            select parameters.First().ParameterType into type
            where type.IsValueType || type == typeof(string)
            let res = new
            {
                Type = type,
                Name = cscp.GetTypeOutput(new CodeTypeReference(type)),
            }
            orderby res.Name
            select res;
        foreach (var type in types) {
			string attribute;
			switch(type.Name.ToLowerInvariant()) {
			case "sbyte":
			case "ulong":
			case "ushort":
			case "uint":
				attribute = "        [CLSCompliant(false)]";
				break;
			default:
				attribute = "";
				break;
			}
        #>
        /// <summary>
        /// Creates a delimited string from a sequence of values. The 
        /// delimiter used depends on the current culture of the executing thread.
        /// </summary>
        /// <remarks>
        /// This operator uses immediate execution and effectively buffers the sequence.
        /// </remarks>
        /// <param name="source">The sequence of items to delimit. Each is converted to a string using the
        /// simple ToString() conversion.</param>
<#= attribute #>
        public static string ToDelimitedString(this IEnumerable<<#= type.Name #>> source)
        {
            return ToDelimitedString(source, null);
        }

        static partial class StringBuilderAppenders 
        {
            public static readonly Func<StringBuilder, <#= type.Name #>, StringBuilder> <#= type.Type.Name #> = (sb, e) => sb.Append(e);
        }

        /// <summary>
        /// Creates a delimited string from a sequence of values and
        /// a given delimiter.
        /// </summary>
        /// <remarks>
        /// This operator uses immediate execution and effectively buffers the sequence.
        /// </remarks>
        /// <param name="source">The sequence of items to delimit. Each is converted to a string using the
        /// simple ToString() conversion.</param>
        /// <param name="delimiter">The delimiter to inject between elements. May be null, in which case
        /// the executing thread's current culture's list separator is used.</param>
<#= attribute #>
        public static string ToDelimitedString(this IEnumerable<<#= type.Name #>> source, string delimiter)
        {
            if (source == null) throw new ArgumentNullException("source");
            return ToDelimitedStringImpl(source, delimiter, StringBuilderAppenders.<#= type.Type.Name #>);
        }

<#      } #>

        static partial class StringBuilderAppenders {}
    }
}
