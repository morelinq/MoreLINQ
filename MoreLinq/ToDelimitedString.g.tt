<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.CSharp" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2013 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

#if !MORELINQ
//
// For projects that may include/embed this source file directly, suppress the
// following warnings since the hosting project may not require CLS compliance
// and MoreEnumerable will most probably be internal.
//
#pragma warning disable 3019 // CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly
#pragma warning disable 3021 // 'type' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
#endif

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Text;

    partial class MoreEnumerable
    {
<#      var cscp = new CSharpCodeProvider();
        var types =
            from method in typeof(StringBuilder).GetMethods(BindingFlags.Public | BindingFlags.Instance)
            where "Append" == method.Name
            select method.GetParameters() into parameters
            where parameters.Length == 1
            select parameters.First().ParameterType into type
            where type.IsValueType || type == typeof(string)
            let res = new
            {
                Type = type,
                Name = cscp.GetTypeOutput(new CodeTypeReference(type)),
            }
            orderby res.Name
            select res;
        foreach (var type in types) {
            string attribute;
            switch(type.Name.ToLowerInvariant()) {
            case "sbyte":
            case "ulong":
            case "ushort":
            case "uint":
                attribute = "        [CLSCompliant(false)]";
                break;
            default:
                attribute = "";
                break;
            }
        #>
        /// <summary>
        /// Creates a delimited string from a sequence of values and
        /// a given delimiter.
        /// </summary>
        /// <param name="source">The sequence of items to delimit. Each is converted to a string using the
        /// simple ToString() conversion.</param>
        /// <param name="delimiter">The delimiter to inject between elements.</param>
        /// <returns>
        /// A string that consists of the elements in <paramref name="source"/>
        /// delimited by <paramref name="delimiter"/>. If the source sequence
        /// is empty, the method returns an empty string.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="source"/> or <paramref name="delimiter"/> is <c>null</c>.
        /// </exception>
        /// <remarks>
        /// This operator uses immediate execution and effectively buffers the sequence.
        /// </remarks>
<#= attribute #>
        public static string ToDelimitedString(this IEnumerable<<#= type.Name #>> source, string delimiter)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (delimiter == null) throw new ArgumentNullException(nameof(delimiter));
            return ToDelimitedStringImpl(source, delimiter, StringBuilderAppenders.<#= type.Type.Name #>);
        }

        static partial class StringBuilderAppenders
        {
            public static readonly Func<StringBuilder, <#= type.Name #>, StringBuilder> <#= type.Type.Name #> = (sb, e) => sb.Append(e);
        }

<#      } #>

        static partial class StringBuilderAppenders {}
    }
}
