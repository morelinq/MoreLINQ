#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2017 Leandro F. Vieira (leandromoh). All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;

    static partial class MoreEnumerable
    {
        /// <summary>
        /// Returns a sequence generated by applying a state to the generator function, 
        /// and from its result, determines if the sequence should have a next element and its value,
        /// and the next state in the recursive call.
        /// </summary>
        /// <typeparam name="TState">Type of state elements.</typeparam>
        /// <typeparam name="T">Type of the elements generated by the generator function.</typeparam>
        /// <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
        /// <param name="state">The initial state.</param>
        /// <param name="generator">
        /// Function that takes a state and procudes an object containing all 
        /// necessary data for the other functions (predicate, stateSelector, resultSelector).
        /// </param>
        /// <param name="predicate">
        /// Function used to determine if state is valid.
        /// </param>
        /// <param name="stateSelector">
        /// Function to select the next state.
        /// </param>
        /// <param name="resultSelector">
        /// Function to select the next result.
        /// </param>
        /// <returns>A sequence containing the results generated by the resultSelector function.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>

        public static IEnumerable<TResult> Unfold<TState, T, TResult>(
            TState state,
            Func<TState, T> generator,
            Func<T, bool> predicate,
            Func<T, TState> stateSelector,
            Func<T, TResult> resultSelector)
        {
            if (generator == null) throw new ArgumentNullException(nameof(generator));
            if (predicate == null) throw new ArgumentNullException(nameof(predicate));
            if (stateSelector == null) throw new ArgumentNullException(nameof(stateSelector));
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return UnfoldImpl(state, generator, predicate, stateSelector, resultSelector);
        }

        /// <summary>
        /// Returns a sequence of values generated by a generator function, which receives a state
        /// and returns either null if it is done producing the sequence, or a tuple with the next element
        /// of the sequence and the value used as the next state in the recursive call.
        /// </summary>
        /// <typeparam name="TState">Type of state elements.</typeparam>
        /// <typeparam name="T">The type of the elements of the result sequence.</typeparam>
        /// <param name="state">The initial state value.</param>
        /// <param name="generator">
        /// Function that takes a state and returns a tuple of the next element of the sequence
        /// and the next state. If the function returns null, it is done producing the sequence.
        /// </param>
        /// <returns>A sequence containing the results generated by the generator function.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>

        public static IEnumerable<T> Unfold<TState, T>(TState state, Func<TState, Tuple<T, TState>> generator)
        {
            if (generator == null) throw new ArgumentNullException(nameof(generator));

            return UnfoldImpl(state, generator, e => e != null, e => e.Item2, e => e.Item1);
        }


        private static IEnumerable<TResult> UnfoldImpl<TState, T, TResult>(
            TState state,
            Func<TState, T> generator,
            Func<T, bool> predicate,
            Func<T, TState> stateSelector,
            Func<T, TResult> resultSelector)
        {
            while (true)
            {
                var step = generator(state);

                if (!predicate(step))
                    yield break;

                yield return resultSelector(step);
                state = stateSelector(step);
            }
        }
    }
}
