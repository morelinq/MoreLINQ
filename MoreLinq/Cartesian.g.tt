<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2010 Leopold Bushkin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;
    using Experimental;

    public static partial class MoreEnumerable
    {

<#      
        var ordinalArray = new[]{"first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth"};
        var amountArray = new[]{"two", "three", "four", "five", "six", "seven", "eight"};
        var itemsInfo =
            (from i in Enumerable.Range(1, ordinalArray.Length)
            let indexStr = i.ToString(CultureInfo.InvariantCulture)
            select new
            {
                Ordinal = ordinalArray[i-1],
                IndexStr = indexStr,
                ItemStr = "item" + indexStr
            }).ToList();



        var overloads =
            from i in Enumerable.Range(2, ordinalArray.Length - 1)
            let arguments = itemsInfo.Take(i).ToList()
            select new
            {
                AmountString  = amountArray[i - 2],
                Arguments     = arguments,
                ArgGenericsStr   = string.Join(", ", arguments.Select(x => "T"+x.IndexStr)),
                ParameterStr  = string.Join(",\r\n\t\t\t", arguments.Select(x => "IEnumerable<T"+x.IndexStr+"> "+x.Ordinal)),
                ResultSelectorArgsStr  = string.Join(", ", arguments.Select(x => x.ItemStr))
            };

        foreach (var o in overloads) { #>


        /// <summary>
        /// Returns the Cartesian product of <#= o.AmountString #> sequences by enumerating all
        /// possible combinations of one item from each sequence, and applying a user-defined
        /// projection to the items in a given combination.
        /// </summary>
<# foreach (var arg in o.Arguments) {#>
        /// <typeparam name="T<#= arg.IndexStr #>">
        /// The type of the elements of <paramref name="<#= arg.Ordinal #>"/>.</typeparam>
<# }#>
        /// <typeparam name="TResult">
        /// The type of the elements of the result sequence.</typeparam>
<# foreach (var arg in o.Arguments) {#>
        /// <param name="<#= arg.Ordinal #>">The <#= arg.Ordinal #> sequence of elements.</param>
<# }#>
        /// <param name="resultSelector">A projection function that combines
        /// elements from all of the sequences.</param>
        /// <returns>A sequence of elements returned by
        /// <paramref name="resultSelector"/>.</returns>
        /// <remarks>
        /// <para>
        /// The method returns items in the same order as a nested foreach loop, but
        /// all sequences except for <paramref name="first"/> are cached when iterated over.
        /// The cache is then re-used for any subsequent iterations.</para>
        /// <para>
        /// This method uses deferred execution and stream its results.</para>
        /// </remarks>

        public static IEnumerable<TResult> Cartesian<<#= o.ArgGenericsStr #>, TResult>(
            this <#= o.ParameterStr #>,
            Func<<#= o.ArgGenericsStr #>, TResult> resultSelector)
        {
<# foreach (var arg in o.Arguments) {#>
            if (<#= arg.Ordinal #> == null) throw new ArgumentNullException(nameof(<#= arg.Ordinal #>));
<# }#>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return _(); IEnumerable<TResult> _()
            {
<# foreach (var arg in o.Arguments.Skip(1)) {#>
                var <#= arg.Ordinal #>Memo = <#= arg.Ordinal #>.Memoize();
<# }#>

<# foreach (var arg in o.Arguments.Skip(1)) {#>
                using (<#= arg.Ordinal #>Memo as IDisposable)
<# }#>
                {
                    foreach (var item1 in first)
<# foreach (var arg in o.Arguments.Skip(1)) {#>
                    foreach (var <#= arg.ItemStr #> in <#= arg.Ordinal #>Memo)
<# }#>
                        yield return resultSelector(<#= o.ResultSelectorArgsStr #>);
                }
            }
        }

<#      } #>
    }
}
