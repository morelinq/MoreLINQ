<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="..\bld\Copyright.props" />

  <PropertyGroup>
    <Title>MoreLINQ</Title>
    <Description>
        This project enhances LINQ to Objects with the following methods:

        - Acquire
        - Aggregate (some EXPERIMENTAL)
        - AggregateRight
        - Append
        - Assert
        - AssertCount
        - AtLeast
        - AtMost
        - Await (EXPERIMENTAL)
        - AwaitCompletion (EXPERIMENTAL)
        - Backsert
        - Batch
        - Cartesian
        - Choose
        - CountBetween
        - CompareCount
        - CountBy
        - CountDown
        - Consume
        - DistinctBy
        - Duplicates
        - EndsWith
        - EquiZip
        - Evaluate
        - Exactly
        - ExceptBy
        - Exclude
        - FallbackIfEmpty
        - FillBackward
        - FillForward
        - Flatten
        - Fold
        - ForEach
        - From
        - FullGroupJoin
        - FullJoin
        - Generate
        - GenerateByIndex
        - GroupAdjacent
        - Index
        - IndexBy
        - Insert
        - Interleave
        - Lag
        - Lead
        - LeftJoin
        - Maxima
        - Memoize (EXPERIMENTAL)
        - Merge (EXPERIMENTAL)
        - Minima
        - Move
        - OrderBy
        - OrderedMerge
        - Pad
        - PadStart
        - Pairwise
        - PartialSort
        - PartialSortBy
        - Partition
        - Permutations
        - Pipe
        - Prepend
        - PreScan
        - Random
        - RandomDouble
        - RandomSubset
        - Rank
        - RankBy
        - Repeat
        - Return
        - RightJoin
        - RunLengthEncode
        - Scan
        - ScanBy
        - ScanRight
        - Segment
        - Sequence
        - Shuffle
        - SkipLast
        - SkipUntil
        - Slice
        - SortedMerge
        - Split
        - StartsWith
        - Subsets
        - TagFirstLast
        - TakeEvery
        - TakeLast
        - TakeUntil
        - ThenBy
        - ToArrayByIndex
        - ToDataTable
        - ToDelimitedString
        - ToDictionary
        - ToHashSet
        - ToLookup
        - Trace
        - Transpose
        - TraverseBreadthFirst
        - TraverseDepthFirst
        - TrySingle (EXPERIMENTAL)
        - Unfold
        - Window
        - WindowLeft
        - WindowRight
        - ZipLongest
        - ZipShortest
    </Description>
    <Description>$([System.Text.RegularExpressions.Regex]::Replace($(Description), `\s+`, ` `).Trim().Replace(` - `, `, `).Replace(`:,`, `:`))</Description>
    <Copyright>$([System.Text.RegularExpressions.Regex]::Replace($(Copyright), `\s+`, ` `).Trim())</Copyright>
    <AssemblyTitle>MoreLINQ</AssemblyTitle>
    <NeutralLanguage>en-US</NeutralLanguage>
    <VersionPrefix>4.3.1</VersionPrefix>
    <Authors>MoreLINQ Developers.</Authors>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net6.0;net8.0</TargetFrameworks>
    <DebugType>portable</DebugType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyName>MoreLinq</AssemblyName>
    <OutputType>Library</OutputType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0'))">true</IsAotCompatible>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
    <PackageId>morelinq</PackageId>
    <PackageTags>linq;extensions</PackageTags>
    <PackageProjectUrl>https://morelinq.github.io/</PackageProjectUrl>
    <PackageLicenseFile>COPYING.txt</PackageLicenseFile>
    <PackageOutputPath>..\dist</PackageOutputPath>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <EnablePackageValidation>true</EnablePackageValidation>
    <PackageValidationBaselineVersion>4.1.0</PackageValidationBaselineVersion>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNet.ReproducibleBuilds" Version="1.2.25">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.4">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
    <PackageReference Include="PolySharp" Version="1.14.1" PrivateAssets="all" />
  </ItemGroup>

  <PropertyGroup>
    <PolySharpIncludeGeneratedTypes>
      System.Index;
      System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute;
      System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute;
      System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes;
      System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute;
      System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute;
      System.Diagnostics.CodeAnalysis.MemberNotNullAttribute;
      System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;
      System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute;
      System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute;
      System.Runtime.CompilerServices.CallerArgumentExpressionAttribute;
    </PolySharpIncludeGeneratedTypes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\COPYING.txt" Pack="true" PackagePath="$(PackageLicenseFile)" />
    <None Include="..\README.md" Pack="true" PackagePath="$(PackageReadmeFile)" />
    <None Include="*.g.tt" />
    <None Update="Aggregate.g.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Aggregate.g.cs</LastGenOutput>
    </None>
    <None Update="Cartesian.g.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Cartesian.g.cs</LastGenOutput>
    </None>
    <None Update="Experimental\Aggregate.g.tt">
      <LastGenOutput>Aggregate.g.cs</LastGenOutput>
      <Generator>TextTemplatingFileGenerator</Generator>
    </None>
    <None Update="Fold.g.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Fold.g.cs</LastGenOutput>
    </None>
    <None Update="ToDelimitedString.g.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>ToDelimitedString.g.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <PropertyGroup>
    <DefineConstants>$(DefineConstants);MORELINQ</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <DefineConstants>$(DefineConstants);NO_ASYNC_STREAMS;NO_BUFFERS</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' != 'netstandard2.0' And '$(TargetFramework)' != 'net6.0'">
    <DefineConstants>$(DefineConstants);DYNAMIC_CODE_FALLBACK</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Aggregate.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Aggregate.g.tt</DependentUpon>
    </Compile>
    <Compile Update="Cartesian.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Cartesian.g.tt</DependentUpon>
    </Compile>
    <Compile Update="Experimental\Aggregate.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Aggregate.g.tt</DependentUpon>
    </Compile>
    <Compile Update="Fold.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Fold.g.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Fold16.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Fold16.g.tt</DependentUpon>
    </Compile>
    <Compile Update="ToDelimitedString.g.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>ToDelimitedString.g.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
  </ItemGroup>

  <Target Name="_CollectTextTemplates">
    <ItemGroup>
      <TextTemplate Include="%(None.Identity)" Condition="'%(None.Generator)' == 'TextTemplatingFileGenerator'">
        <LastGenOutput>%(None.LastGenOutput)</LastGenOutput>
      </TextTemplate>
    </ItemGroup>
  </Target>

  <Target Name="_TransformTextTemplate" Inputs="$(TextTemplate)" Outputs="$(TextTemplateOutput)">
    <Exec Command="dotnet t4 -h &gt; /dev/null" IgnoreExitCode="True" Condition="'$(WINDIR)' == ''">
      <Output TaskParameter="ExitCode" PropertyName="_TestExitCode" />
    </Exec>
    <Exec Command="dotnet t4 -h &gt; NUL" IgnoreExitCode="True" Condition="'$(WINDIR)' != ''">
      <Output TaskParameter="ExitCode" PropertyName="_TestExitCode" />
    </Exec>
    <Exec Command="dotnet tool restore" Condition="$(_TestExitCode) != 0" />
    <Message Text="dotnet t4 $(TextTemplate) -o $(TextTemplateOutput)" Importance="High" />
    <Exec Command="dotnet t4 $(TextTemplate) -o $(TextTemplateOutput)" />
  </Target>

  <Target Name="TransformTextTemplates"
          DependsOnTargets="_CollectTextTemplates">
    <MSBuild Projects="$(MSBuildProjectFile)"
             Targets="_TransformTextTemplate"
             Properties="TextTemplate=%(TextTemplate.Identity);TextTemplateOutput=%(TextTemplate.LastGenOutput)"  />
  </Target>

</Project>
