<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2013 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;

    partial class MoreEnumerable
    {<#
        const int max = 16;
        var overloads =
            Enumerable.Range(1, max)
                      .Zip(Enumerable.Repeat("elements", max).Prepend("element"), (c, n) => new
                      {
                          Count = c,
                          CountString = c.ToString(CultureInfo.InvariantCulture),
                          ElementNoun = n
                      });

        foreach (var e in overloads) { #>

        /// <summary>
        /// Returns the result of applying a function to a sequence of
        /// <#= e.CountString #> <#= e.ElementNoun #>.
        /// </summary>
        /// <remarks>
        /// This operator uses immediate execution and effectively buffers
        /// as many items of the source sequence as necessary.
        /// </remarks>
        /// <typeparam name="T">Type of element in the source sequence.</typeparam>
        /// <typeparam name="TResult">Type of the result.</typeparam>
        /// <param name="source">The sequence of items to fold.</param>
        /// <param name="folder">Function to apply to the elements in the sequence.</param>
        /// <returns>The folded value returned by <paramref name="folder"/>.</returns>
        /// <exception cref="ArgumentNullException">
        /// Either <paramref name="source"/> or <paramref name="folder"/> is <see langword="null"/>.
        /// </exception>
        /// <exception cref="InvalidOperationException"><paramref name="source"/> does not contain exactly <#= e.CountString #> <#= e.ElementNoun #>.</exception>

        public static TResult Fold<T, TResult>(this IEnumerable<T> source, Func<<#= string.Join(", ", Enumerable.Repeat("T", e.Count)) #>, TResult> folder)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (folder == null) throw new ArgumentNullException(nameof(folder));

            var elements = source.Fold(<#= e.CountString #>);
            return folder(<#= string.Join(", ", from i in Enumerable.Range(0, e.Count)
                                                select FormattableString.Invariant($"elements[{i}]")) #>);
        }
<#      } #>
    }
}
